Demo 1

Use flight-example.json 

try output directives 

application/java
application/json
application/xml

For application/xml

Add output-payload in http-listener

Use flight-example.json 

click preview in output section of tranform 

Directive application/java


Try 
payload.price

data: payload.price
data: payload
data: {
       
       hub: "MUA"
}


Add another transformation with same component

FlowVars:xml

%dw 1.0
%output application/xml
---
data:payload

%dw 1.0
%output application/xml
---
data:{
       
       hub:"MUA",
       code: payload.toAirportCode,
       airline: payload.airline
}


%dw 1.0
%output application/xml
---
data:{
       
       hub:"MUA",
       
       flight:{
             code: payload.toAirportCode,
             airline: payload.airline
       }
}

%dw 1.0
%output application/xml
---
data:{
       
       hub:"MUA",
       
       flight @(airline:payload.airline):{
             airline: payload.airline
       }
}

/mulitipleflightsFlow


%dw 1.0
%output application/java
---
payload

payload[0].*price

payload.*price

[payload.price,payload.emptySeats]

payload map $

%dw 1.0
%output application/java
---
payload map {
       
       flight: $$
}

%dw 1.0
%output application/java
---
payload map {
       
       flight: $$,
       destination: $.toAirportCode
}

%dw 1.0
%output application/java
---
payload map {
       
       flight: $$,
       ($$): $
}    

%dw 1.0
%output application/java
---
payload map {
       
       flight: $$,
       'flight$$': $
}

Change the expression to output XML

%dw 1.0
%output application/xml
---
flights: payload map {
       
       flight: $$,
       'flight$$': $
}

gives an error

%dw 1.0
%output application/xml
---
flights: {(payload map {
       flight: $$
}
)
}

change output payload of http listener

%dw 1.0
%output application/xml
---
flights: {(payload map {
       flight: $
}
)
}

%dw 1.0
%output application/xml
%namespace ns0 http://soap.training.mulesoft.com/
---
flights: {(payload.ns0#listAllFlightsResponse map {
       flight: $
}
)
}

%dw 1.0
%output application/xml
%namespace ns0 http://soap.training.mulesoft.com/
---
flights: {(payload.ns0#listAllFlightsResponse.return map {
       flight: $
}
)
}

%dw 1.0
%output application/xml
%namespace ns0 http://soap.training.mulesoft.com/
---
flights: {(payload.ns0#listAllFlightsResponse.*return map {
       flight: $
}
)
}

%dw 1.0
%output application/xml
%namespace ns0 http://soap.training.mulesoft.com/
---
flights: {(payload.ns0#listAllFlightsResponse.*return map {
       flight: {
                    dest: $.destination,
                    price: $.price
             
             
       }
}
)
}

change tranformation to java

%dw 1.0
%output application/xml
%namespace ns0 http://soap.training.mulesoft.com/
---
flights: {(payload.ns0#listAllFlightsResponse.*return map {
       flight: {
                    dest: $.destination,
                    price: $.price
             
             
       }
}
)
}


%dw 1.0
%output application/java
%namespace ns0 http://soap.training.mulesoft.com/
---
flights: payload.ns0#listAllFlightsResponse.*return map {
       flight: {
                    dest: $.destination,
                    price: $.price
             
             
       }
}


%dw 1.0
%output application/java
%namespace ns0 http://soap.training.mulesoft.com/
---
flights: payload.ns0#listAllFlightsResponse.*return map {
       flight: {
                    dest: $.destination,
                    price: $.price,
                    plane: upper $.planeType
             
       }
}

%dw 1.0
%output application/java
%namespace ns0 http://soap.training.mulesoft.com/
---
flights: payload.ns0#listAllFlightsResponse.*return map {
       flight: {
                    dest: $.destination,
                    price: $.price as :number,
                    plane: upper $.planeType
             
       }
}


%dw 1.0
%output application/java
%namespace ns0 http://soap.training.mulesoft.com/
---
flights: payload.ns0#listAllFlightsResponse.*return map {
       flight: {
                    dest: $.destination,
                    price: $.price as :number {class: "java.lang.Double"},
                    plane: upper $.planeType
             
       }
}

%dw 1.0
%output application/java
%namespace ns0 http://soap.training.mulesoft.com/
---
flights: payload.ns0#listAllFlightsResponse.*return map {
       flight: {
                    dest: $.destination,
                    price: $.price as :number as :string {format:"###.##"},
                    plane: upper $.planeType
             
       }
}

%dw 1.0
%output application/java
%namespace ns0 http://soap.training.mulesoft.com/
---
flights: payload.ns0#listAllFlightsResponse.*return map {
       flight: {
                    dest: $.destination,
                    price: $.price as :number as :string {format:"###.00"},
                    plane: upper $.planeType
             
       }
}

%dw 1.0
%output application/java
%namespace ns0 http://soap.training.mulesoft.com/
---
flights: payload.ns0#listAllFlightsResponse.*return map {
       flight: {
                    dest: $.destination,
                    price: $.price as :number as :string {format:"###.00"},
                    plane: upper $.planeType,
                    date: $.departureDate as :date {format:"yyyy/MM/dd"}
             
       }
}

%dw 1.0
%output application/java
%namespace ns0 http://soap.training.mulesoft.com/
---
flights: payload.ns0#listAllFlightsResponse.*return map {
       flight: {
                    dest: $.destination,
                    price: $.price as :number as :string {format:"###.00"},
                    plane: upper $.planeType,
                    date: $.departureDate as :date {format:"yyyy/MM/dd"} as :string {format: "MMM dd, yyyy"}
             
       }
}

%dw 1.0
%output application/java
%namespace ns0 http://soap.training.mulesoft.com/
---
flights: payload.ns0#listAllFlightsResponse.*return map {
       flight: {
                    dest: $.destination,
                    price: $.price as :number as :string {format:"###.00"},
                    plane: upper $.planeType replace /(Boing)/ with "Boeing",
                    date: $.departureDate as :date {format:"yyyy/MM/dd"} as :string {format: "MMM dd, yyyy"}
             
       }
}

%dw 1.0
%output application/java
%namespace ns0 http://soap.training.mulesoft.com/
---
flights: payload.ns0#listAllFlightsResponse.*return map {
       flight: {
                    dest: $.destination,
                    price: $.price as :number as :string {format:"###.00"},
                    plane: upper $.planeType replace /(Boing)/ with "Boeing",
                    date: $.departureDate as :date {format:"yyyy/MM/dd"} as :string {format: "MMM dd, yyyy"}
             
       }
} orderBy $.date orderBy $.price


%dw 1.0
%output application/java
%namespace ns0 http://soap.training.mulesoft.com/
---
flights: payload.ns0#listAllFlightsResponse.*return map {
       flight: {
                    dest: $.destination,
                    price: $.price as :number as :string {format:"###.00"},
                    plane: upper $.planeType replace /(Boing)/ with "Boeing",
                    date: $.departureDate as :date {format:"yyyy/MM/dd"} as :string {format: "MMM dd, yyyy"},
                    seats: $.emptySeats as :number
                    
       }
}


%dw 1.0
%output application/java
%namespace ns0 http://soap.training.mulesoft.com/
%type currency = :string {format:"###.00"}
---
flights: payload.ns0#listAllFlightsResponse.*return map {
       flight: {
                    dest: $.destination,
                    price: $.price as :number as :currency,
                    plane: upper $.planeType replace /(Boing)/ with "Boeing",
                    date: $.departureDate as :date {format:"yyyy/MM/dd"} as :string {format: "MMM dd, yyyy"},
                    seats: $.emptySeats as :number
                    
       }
} distinctBy $ filter  ($.seats != 0)











%dw 1.0
%output application/json
%namespace ns0 http://soap.training.mulesoft.com/
---
flights: payload.ns0#listAllFlightsResponse.*return filter ($.emptySeats > 0) map {
       flight: {
                    dest: $.destination,
                    price: $.price,
                    plane: upper $.planeType,
                    seats: $.emptySeats as :number      
       }
}







